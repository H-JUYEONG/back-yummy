<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DdrReview">

	<!-- 주문 ID 조회 -->
	<select id="selectOrderId" parameterType="map" resultType="int">
		SELECT order_id
		FROM `Order`
		WHERE product_id = #{productId}
		AND user_id
		= #{userId}
		AND
		order_status = '수령 완료'
		ORDER BY order_date DESC
		LIMIT 1
	</select>



	<resultMap id="ReviewResultMap" type="DdrReviewVo">
		<id property="reviewId" column="review_id" />
		<result property="reviewUserId" column="review_user_id" />
		<result property="reviewContent" column="review_content" />
		<result property="reviewRating" column="review_rating" />
		<result property="reviewImageUrl" column="review_image_url" />
		<result property="reviewCreatedAt" column="review_created_at" />
		<result property="authorNickname" column="author_nickname" />
		<collection property="replies" ofType="DdrReviewReplyVo">
			<id property="replyId" column="reply_id" />
			<result property="replyContent" column="reply_content" />
			<result property="replyVenderId" column="reply_vender_id" />
			<result property="replyCreatedAt" column="reply_created_at" />
			<result property="venderName" column="reply_vender_name" />
		</collection>
	</resultMap>

	<select id="selectProductReviews" parameterType="map" resultMap="ReviewResultMap">
		SELECT
		r.review_id,
		r.review_user_id,
		r.review_content,
		r.review_rating,
		r.review_image_url,
		r.review_created_at,
		u.user_nickname as
		author_nickname,
		rr.reply_id,
		rr.reply_content,
		rr.reply_vender_id,
		rr.reply_created_at,
		v2.vender_name as reply_vender_name
		FROM Review r
		JOIN `Order` o ON r.review_order_id = o.order_id
		JOIN
		User u ON
		r.review_user_id = u.user_id
		LEFT JOIN ReviewReply rr ON r.review_id =
		rr.review_id
		LEFT JOIN Vender v2 ON rr.reply_vender_id = v2.vender_id
		WHERE
		o.product_id = #{productId}
		<if test="showPhotoOnly == true">
			AND r.review_image_url IS NOT NULL
			AND r.review_image_url
			!= ''
		</if>
		<choose>
			<when test="sort == 'latest'">
				ORDER BY r.review_created_at DESC
			</when>
			<when test="sort == 'rating'">
				ORDER BY r.review_rating DESC, r.review_created_at
				DESC
			</when>
			<when test="sort == 'recommend'">
				ORDER BY r.review_rating DESC, r.review_created_at
				DESC
			</when>
			<otherwise>
				ORDER BY r.review_created_at DESC
			</otherwise>
		</choose>
	</select>

	<!-- 리뷰 통계 조회 -->
	<select id="selectReviewStats" parameterType="int" resultType="DdrReviewVo">
		SELECT
		COALESCE(ROUND(AVG(r.review_rating), 1), 0) as
		averageRating,
		COUNT(*) as
		totalReviews,
		SUM(CASE WHEN r.review_rating =
		5 THEN 1 ELSE 0 END) as ratingCounts5,
		SUM(CASE WHEN r.review_rating =
		4 THEN 1 ELSE 0 END) as ratingCounts4,
		SUM(CASE WHEN r.review_rating =
		3 THEN 1 ELSE 0 END) as ratingCounts3,
		SUM(CASE WHEN r.review_rating =
		2 THEN 1 ELSE 0 END) as ratingCounts2,
		SUM(CASE WHEN
		r.review_rating =
		1 THEN 1 ELSE 0 END) as ratingCounts1
		FROM Review r
		JOIN `Order` o ON
		r.review_order_id = o.order_id
		WHERE o.product_id = #{productId}
	</select>

	<!-- 구매 이력 확인 -->
	<select id="checkPurchaseHistory" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM `Order`
		WHERE product_id = #{productId}
		AND user_id = #{userId}
		AND
		order_status IN ('수령 완료', '결제 완료')
	</select>

	<!-- 리뷰 작성 이력 확인 -->
	<select id="checkReviewHistory" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM Review r
		JOIN `Order` o ON
		r.review_order_id = o.order_id
		WHERE
		o.product_id = #{productId}
		AND
		r.review_user_id = #{userId}
	</select>

	<select id="checkReceiptStatus" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM `Order`
		WHERE product_id = #{productId}
		AND user_id = #{userId}
		AND
		order_status = '수령 완료'
	</select>


	<insert id="insertReview" parameterType="DdrReviewVo">
		INSERT INTO Review (
		review_user_id,
		review_order_id,
		product_id,
		review_rating,
		review_content,
		review_image_url,
		review_created_at
		) VALUES (
		#{reviewUserId},
		#{reviewOrderId},
		(SELECT
		product_id FROM `Order` WHERE order_id = #{reviewOrderId}),
		#{reviewRating},
		#{reviewContent},
		#{reviewImageUrl},
		now()
		)
	</insert>
	<!-- 리뷰 신고 처리 -->
	<update id="updateReviewReport" parameterType="int">
		UPDATE Review
		SET
		reported = reported + 1
		WHERE review_id = #{reviewId}
	</update>

	<!-- 리뷰의 상품에 대한 업체 ID 조회 -->
	<select id="getReviewVenderId" parameterType="int" resultType="int">
		SELECT p.vender_id
		FROM Review r
		JOIN `Order` o ON
		r.review_order_id = o.order_id
		JOIN Product
		p ON o.product_id =
		p.product_id
		WHERE r.review_id = #{reviewId}
	</select>

	<insert id="insertReviewReply" parameterType="DdrReviewReplyVo">
		INSERT INTO ReviewReply (
		review_id,
		reply_vender_id,
		reply_content,
		reply_created_at
		) VALUES (
		#{reviewId},
		#{replyVenderId},
		#{replyContent},
		now()
		)
	</insert>
	<!-- 대댓글 조회 -->
	<select id="selectReviewReply" parameterType="int" resultType="DdrReviewReplyVo">
		SELECT
		rr.reply_id as replyId,
		rr.review_id as reviewId,
		rr.reply_vender_id as replyVenderId,
		rr.reply_content as replyContent,
		rr.reply_created_at as replyCreatedAt,
		v.vender_name as venderName
		FROM
		ReviewReply rr
		JOIN Vender v ON rr.reply_vender_id =
		v.vender_id
		WHERE
		rr.reply_id = #{replyId}
	</select>

	<!-- 업체 대댓글 삭제 -->
	<delete id="deleteReviewReply" parameterType="map">
		DELETE FROM
		ReviewReply
		WHERE reply_id = #{replyId}
		AND reply_vender_id =
		#{venderId}
	</delete>


	<!-- 리뷰 삭제 (기존 쿼리 수정) -->
	<delete id="deleteReview" parameterType="map">
		DELETE FROM Review
		WHERE review_id = #{reviewId}
		AND review_user_id = #{userId};
	</delete>

	<select id="countUserReview" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM Review r
		JOIN User u ON r.review_user_id
		= u.user_id
		WHERE r.review_id =
		#{reviewId}
		AND u.member_id = #{userId}
	</select>

	<!-- 새로 추가: 대댓글 삭제 쿼리 -->
	<delete id="deleteReviewReplies" parameterType="int">
		DELETE FROM ReviewReply
		WHERE review_id = #{reviewId}
	</delete>

	<select id="checkReviewEligibility" parameterType="map" resultType="map">
		SELECT
		o.order_id as orderId,
		o.product_id as productId,
		o.order_status as orderStatus,
		CASE
		WHEN o.order_status = '수령 완료' AND
		r.review_id IS NULL THEN true
		ELSE false
		END as canReview
		FROM `Order` o
		JOIN User u ON o.user_id = u.user_id
		LEFT JOIN Review
		r ON o.order_id =
		r.review_order_id AND r.review_user_id
		= u.user_id
		WHERE o.product_id =
		#{productId} AND u.member_id = #{memberId}
	</select>

	<select id="selectOrderInfo" parameterType="map" resultType="map">
		SELECT
		o.order_id,
		o.product_id,
		o.user_id,
		o.order_status,
		o.created_at
		FROM `Order` o
		WHERE
		o.product_id = #{productId}
		AND
		o.user_id = #{userId}
		ORDER BY o.order_id DESC
		LIMIT 1
	</select>
</mapper>